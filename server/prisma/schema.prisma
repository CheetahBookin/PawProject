generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  agreement Boolean
  resetCode String?
  profile   UserProfile?
  rates    Rates[]
  orders   Orders[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  hotelId   Int
  roomId    Int
  adults    Int
  children  Int
  fromDate  DateTime
  toDate   DateTime
  carParkFee Float
  fullPrice Float
  paid      Boolean
  paymentId String?
  invoice   Invoice?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  firstName String
  lastName  String
  country   String
  address   String
  profileImage String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        Int      @id @default(autoincrement())
  order   Orders @relation(fields: [orderId], references: [id])
  orderId Int     @unique
  name      String?
  surname   String?
  email     String?
  address   String?
  country   String?
  city      String?
  postalCode String?
  price     Int?
  status    String
  currency  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accomodation {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  country   String
  city      String
  type     String
  carParkFee Float?
  flag_url  String?
  images    AccomodationImages[]
  Rooms     Rooms[]
  Rates     Rates[]
  BookedDates BookedDates[]
}

model BookedDates {
  id        Int      @id @default(autoincrement())
  accomodation     Accomodation    @relation(fields: [hotelId], references: [id])
  hotelId   Int
  date      String
}

model Rates {
  id        Int      @id @default(autoincrement())
  accomodation     Accomodation    @relation(fields: [hotelId], references: [id])
  hotelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  rate      Int
  message  String
  date      DateTime
}

model AccomodationImages {
  id        Int      @id @default(autoincrement())
  accomodation     Accomodation    @relation(fields: [hotelId], references: [id])
  hotelId   Int
  image     String
}

model Rooms {
  id        Int      @id @default(autoincrement())
  accomodation     Accomodation    @relation(fields: [hotelId], references: [id])
  hotelId   Int
  roomNumber      String
  peopleCapacity  Int
  priceForPerson     Float
  childrenPrice   Float
  discount   Float?
}